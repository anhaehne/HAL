import * as utpl from 'uri-templates';
/**
 *  A Link Object represents a hyperlink from the containing resource to a URI.
 */
export class Link {
    fillTemplate(parameters) {
        return utpl(this.href).fill(parameters);
    }
    static fromDto(dto) {
        const link = Object.assign(new Link(), dto);
        return link;
    }
    static fromDtos(dtos) {
        if (!dtos)
            return [];
        const links = dtos
            .filter(dto => !!(dto === null || dto === void 0 ? void 0 : dto.href))
            .map(dto => Link.fromDto(dto));
        return links;
    }
}
//# sourceMappingURL=data:application/json;base64,