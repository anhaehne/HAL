import { Link } from "./link";
import * as _ from 'lodash';
/**
 *  A Resource Object represents a resource.
 *  It has two reserved properties:
 *  (1)  "_links": contains links to other resources.
 *  (2)  "_embedded": contains embedded resources.
 */
export class Resource {
    findLinks(rel) {
        const linksWithRel = this._links[rel];
        if (!linksWithRel)
            return [];
        return linksWithRel;
    }
    findLink(rel, name) {
        const linksWithRel = this.findLinks(rel);
        if (linksWithRel.length === 0)
            return undefined;
        if (name)
            return linksWithRel.find(link => link.name === name);
        return linksWithRel[0];
    }
    findEmbedded(rel) {
        const embeddedWithRel = this._embedded[rel];
        if (!embeddedWithRel)
            return [];
        return embeddedWithRel;
    }
    static fromDto(dto, TResource) {
        const links = !(dto === null || dto === void 0 ? void 0 : dto._links) ? {} : Object.fromEntries(Object.entries(dto._links).map(([rel, links]) => [rel, Link.fromDtos(links)]));
        const embedded = !(dto === null || dto === void 0 ? void 0 : dto._embedded) ? {} : Object.fromEntries(Object.entries(dto._embedded).map(([rel, resources]) => [rel, Resource.fromDtos(resources)]));
        const dtoWithParsedDates = Resource.parseDates(dto);
        const resource = Object.assign(!!(TResource) ? new TResource() : new Resource(), dtoWithParsedDates, { _embedded: embedded, _links: links });
        return resource;
    }
    static fromDtos(dtos) {
        if (!dtos)
            return [];
        const resources = dtos
            .filter(dto => !!dto)
            .map(dto => Resource.fromDto(dto));
        return resources;
    }
    static parseDates(dto) {
        if (dto === null || dto === undefined)
            return dto;
        if (_.isString(dto)) {
            if (this._iso8601RegEx.test(dto))
                return new Date(dto);
        }
        else if (_.isArray(dto)) {
            for (let i = 0; i < dto.length; i++) {
                dto[i] = this.parseDates(dto[i]);
            }
        }
        else if (_.isPlainObject(dto)) {
            for (let [key, value] of Object.entries(dto)) {
                dto[key] = this.parseDates(value);
            }
        }
        return dto;
    }
}
Resource._iso8601RegEx = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*))(?:Z|(\+|-)([\d|:]*))?$/;
//# sourceMappingURL=data:application/json;base64,