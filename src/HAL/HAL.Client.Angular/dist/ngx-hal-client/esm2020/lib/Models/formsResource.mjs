import { Resource } from './resource';
;
export var PropertyType;
(function (PropertyType) {
    PropertyType["Hidden"] = "hidden";
    PropertyType["Text"] = "text";
    PropertyType["Textarea"] = "textarea";
    PropertyType["Search"] = "search";
    PropertyType["Tel"] = "tel";
    PropertyType["Url"] = "url";
    PropertyType["Email"] = "email";
    PropertyType["Password"] = "password";
    PropertyType["Date"] = "date";
    PropertyType["Month"] = "month";
    PropertyType["Week"] = "week";
    PropertyType["Time"] = "time";
    PropertyType["DatetimeLocal"] = "datetime-local";
    PropertyType["Number"] = "number";
    PropertyType["Range"] = "range";
    PropertyType["Color"] = "color";
    PropertyType["Bool"] = "bool";
    PropertyType["DatetimeOffset"] = "datetime-offset";
    PropertyType["Duration"] = "duration";
    PropertyType["Image"] = "image";
    PropertyType["File"] = "file";
    PropertyType["Collection"] = "collection";
    PropertyType["Object"] = "object";
})(PropertyType || (PropertyType = {}));
export class Options {
    constructor(dto) {
        this.inline = [];
        Object.assign(this, dto);
        if (!this.inline)
            this.inline = [];
    }
}
export class Property {
    constructor(dto) {
        Object.assign(this, dto);
        this._templates = !(dto?._templates) ? {} : Object.fromEntries(Object.entries(dto._templates).map(([rel, templateDto]) => [rel, new Template(templateDto)]));
        if (this.options)
            this.options = new Options(dto?.options);
    }
}
;
export class Template {
    constructor(dto) {
        Object.assign(this, dto);
        this.properties = !(dto?.properties) ? [] : dto.properties.map(propertyDto => new Property(propertyDto));
    }
    get values() {
        return !this.properties ? {} : Object.fromEntries(this.properties.map(property => [property.name, property.value]));
    }
}
export class FormsResource extends Resource {
    constructor(dto) {
        super(dto);
        this._templates = !(dto?._templates) ? {} : Object.fromEntries(Object.entries(dto._templates).map(([rel, templateDto]) => [rel, new Template(templateDto)]));
    }
    getTemplate(name) {
        const templateNames = Object.getOwnPropertyNames(this._templates);
        if (!templateNames.includes(name))
            throw new Error(`The form ${this} does not have a _template with the name '${name}'. It only has ${templateNames}.`);
        const template = this._templates[name];
        return template;
    }
}
//# sourceMappingURL=data:application/json;base64,