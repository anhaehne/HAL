import { HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class HalClient {
    constructor(_httpClient) {
        this._httpClient = _httpClient;
    }
    async get(uri, TResource, TError, headers) {
        const options = HalClient.createOptions(headers);
        let dtoResponse;
        try {
            dtoResponse = await this._httpClient.get(uri, options).toPromise();
        }
        catch (e) {
            if (e instanceof HttpErrorResponse)
                dtoResponse = HalClient.convertErrorResponse(e);
            else
                throw new Error(`GET ${uri} - options: ${JSON.stringify(options)} failed with error ${e}`);
        }
        if (!dtoResponse)
            throw new Error(`GET ${uri} - options: ${JSON.stringify(options)} did not return a response.`);
        const resourceResponse = HalClient.convertResponse(dtoResponse.ok ? TResource : TError, dtoResponse);
        return resourceResponse;
    }
    async post(uri, body, TResource, TError, headers) {
        const options = HalClient.createOptions(headers);
        let dtoResponse;
        try {
            dtoResponse = await this._httpClient.post(uri, body, options).toPromise();
        }
        catch (e) {
            if (e instanceof HttpErrorResponse)
                dtoResponse = HalClient.convertErrorResponse(e);
            else
                throw new Error(`POST ${uri} - options: ${JSON.stringify(options)} - body: ${body} failed with error ${e}`);
        }
        if (!dtoResponse)
            throw new Error(`POST ${uri} - options: ${JSON.stringify(options)} - body: ${body} did not return a response.`);
        const resourceResponse = HalClient.convertResponse(dtoResponse.ok ? TResource : TError, dtoResponse);
        return resourceResponse;
    }
    async put(uri, body, TResource, TError, headers) {
        const options = HalClient.createOptions(headers);
        let dtoResponse;
        try {
            dtoResponse = await this._httpClient.put(uri, body, options).toPromise();
        }
        catch (e) {
            if (e instanceof HttpErrorResponse)
                dtoResponse = HalClient.convertErrorResponse(e);
            else
                throw new Error(`PUT ${uri} - options: ${JSON.stringify(options)} - body: ${body} failed with error ${e}`);
        }
        if (!dtoResponse)
            throw new Error(`PUT ${uri} - options: ${JSON.stringify(options)} - body: ${body} did not return a response.`);
        const resourceResponse = HalClient.convertResponse(dtoResponse.ok ? TResource : TError, dtoResponse);
        return resourceResponse;
    }
    async delete(uri, TError, headers) {
        const options = HalClient.createOptions(headers);
        let response;
        try {
            response = await this._httpClient.delete(uri, options).toPromise();
        }
        catch (e) {
            if (e instanceof HttpErrorResponse)
                response = HalClient.convertErrorResponse(e);
            else
                throw new Error(`DELETE ${uri} - options: ${JSON.stringify(options)} failed with error ${e}`);
        }
        if (!response)
            throw new Error(`DELETE ${uri} - options: ${JSON.stringify(options)} did not return a response.`);
        if (!response.ok) {
            const errorResponse = HalClient.convertResponse(TError, response);
            return errorResponse;
        }
        return response;
    }
    static createOptions(headers) {
        headers?.append('Accept', 'application/hal+json');
        return {
            headers: headers,
            responseType: 'json',
            observe: 'response'
        };
    }
    static convertResponse(TResource, response) {
        const resource = new TResource(response.body);
        const resourceResponse = response.clone({ body: resource });
        return resourceResponse;
    }
    static convertErrorResponse(e) {
        const dtoResponse = new HttpResponse({ body: e.error, headers: e.headers, status: e.status, statusText: e.statusText, url: e.url ? e.url : undefined });
        return dtoResponse;
    }
}
HalClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: HalClient, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
HalClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: HalClient, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: HalClient, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFsLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1oYWwtY2xpZW50L3NyYy9saWIvaGFsLWNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsaUJBQWlCLEVBQWUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDaEcsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBTTNDLE1BQU0sT0FBTyxTQUFTO0lBRXBCLFlBQW9CLFdBQXVCO1FBQXZCLGdCQUFXLEdBQVgsV0FBVyxDQUFZO0lBQUksQ0FBQztJQUV6QyxLQUFLLENBQUMsR0FBRyxDQUFzRCxHQUFXLEVBQUUsU0FBK0IsRUFBRSxNQUF5QixFQUFFLE9BQXFCO1FBQ2xLLE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakQsSUFBSSxXQUFrRCxDQUFDO1FBQ3ZELElBQUk7WUFDRixXQUFXLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBYyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDakY7UUFDRCxPQUFPLENBQUMsRUFBRTtZQUNSLElBQUksQ0FBQyxZQUFZLGlCQUFpQjtnQkFDaEMsV0FBVyxHQUFHLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Z0JBRWhELE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxHQUFHLGVBQWUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDOUY7UUFDRCxJQUFJLENBQUMsV0FBVztZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxHQUFHLGVBQWUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUNqRyxNQUFNLGdCQUFn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QUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUN2RSxPQUFPLGdCQUFnQixDQUFDO0lBQzFCLENBQUM7SUFFTyxNQUFNLENBQUMsb0JBQW9CLENBQWUsQ0FBb0I7UUFDcEUsTUFBTSxXQUFXLEdBQUcsSUFBSSxZQUFZLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUN4SixPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDOztzR0FsR1UsU0FBUzswR0FBVCxTQUFTLGNBRlIsTUFBTTsyRkFFUCxTQUFTO2tCQUhyQixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBFcnJvclJlc3BvbnNlLCBIdHRwSGVhZGVycywgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJlc291cmNlLCBSZXNvdXJjZUR0byB9IGZyb20gJy4vTW9kZWxzL3Jlc291cmNlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEhhbENsaWVudCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2h0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHsgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgZ2V0PFRSZXNvdXJjZSBleHRlbmRzIFJlc291cmNlLCBURXJyb3IgZXh0ZW5kcyBSZXNvdXJjZT4odXJpOiBzdHJpbmcsIFRSZXNvdXJjZTogeyBuZXcoKTogVFJlc291cmNlIH0sIFRFcnJvcjogeyBuZXcoKTogVEVycm9yIH0sIGhlYWRlcnM/OiBIdHRwSGVhZGVycyk6IFByb21pc2U8SHR0cFJlc3BvbnNlPFRSZXNvdXJjZSB8IFRFcnJvcj4+IHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBIYWxDbGllbnQuY3JlYXRlT3B0aW9ucyhoZWFkZXJzKTtcclxuICAgIGxldCBkdG9SZXNwb25zZTogSHR0cFJlc3BvbnNlPFJlc291cmNlRHRvPiB8IHVuZGVmaW5lZDtcclxuICAgIHRyeSB7XHJcbiAgICAgIGR0b1Jlc3BvbnNlID0gYXdhaXQgdGhpcy5faHR0cENsaWVudC5nZXQ8UmVzb3VyY2VEdG8+KHVyaSwgb3B0aW9ucykudG9Qcm9taXNlKCk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIEh0dHBFcnJvclJlc3BvbnNlKVxyXG4gICAgICAgIGR0b1Jlc3BvbnNlID0gSGFsQ2xpZW50LmNvbnZlcnRFcnJvclJlc3BvbnNlKGUpO1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBHRVQgJHt1cml9IC0gb3B0aW9uczogJHtKU09OLnN0cmluZ2lmeShvcHRpb25zKX0gZmFpbGVkIHdpdGggZXJyb3IgJHtlfWApO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkdG9SZXNwb25zZSlcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBHRVQgJHt1cml9IC0gb3B0aW9uczogJHtKU09OLnN0cmluZ2lmeShvcHRpb25zKX0gZGlkIG5vdCByZXR1cm4gYSByZXNwb25zZS5gKTtcclxuICAgIGNvbnN0IHJlc291cmNlUmVzcG9uc2UgPSBIYWxDbGllbnQuY29udmVydFJlc3BvbnNlIDxUUmVzb3VyY2UgfCBURXJyb3I+KGR0b1Jlc3BvbnNlLm9rID8gVFJlc291cmNlIDogVEVycm9yLCBkdG9SZXNwb25zZSk7XHJcbiAgICByZXR1cm4gcmVzb3VyY2VSZXNwb25zZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBwb3N0PFRSZXNvdXJjZSBleHRlbmRzIFJlc291cmNlLCBURXJyb3IgZXh0ZW5kcyBSZXNvdXJjZT4odXJpOiBzdHJpbmcsIGJvZHk6IHVua25vd24sIFRSZXNvdXJjZTogeyBuZXcoKTogVFJlc291cmNlIH0sIFRFcnJvcjogeyBuZXcoKTogVEVycm9yIH0sIGhlYWRlcnM/OiBIdHRwSGVhZGVycyk6IFByb21pc2U8SHR0cFJlc3BvbnNlPFRSZXNvdXJjZSB8IFRFcnJvcj4+IHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBIYWxDbGllbnQuY3JlYXRlT3B0aW9ucyhoZWFkZXJzKTtcclxuICAgIGxldCBkdG9SZXNwb25zZTogSHR0cFJlc3BvbnNlPFJlc291cmNlRHRvPiB8IHVuZGVmaW5lZDtcclxuICAgIHRyeSB7XHJcbiAgICAgIGR0b1Jlc3BvbnNlID0gYXdhaXQgdGhpcy5faHR0cENsaWVudC5wb3N0PFRSZXNvdXJjZT4odXJpLCBib2R5LCBvcHRpb25zKS50b1Byb21pc2UoKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgSHR0cEVycm9yUmVzcG9uc2UpXHJcbiAgICAgICAgZHRvUmVzcG9uc2UgPSBIYWxDbGllbnQuY29udmVydEVycm9yUmVzcG9uc2UoZSk7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBPU1QgJHt1cml9IC0gb3B0aW9uczogJHtKU09OLnN0cmluZ2lmeShvcHRpb25zKX0gLSBib2R5OiAke2JvZHl9IGZhaWxlZCB3aXRoIGVycm9yICR7ZX1gKTtcclxuICAgIH1cclxuICAgIGlmICghZHRvUmVzcG9uc2UpXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUE9TVCAke3VyaX0gLSBvcHRpb25zOiAke0pTT04uc3RyaW5naWZ5KG9wdGlvbnMpfSAtIGJvZHk6ICR7Ym9keX0gZGlkIG5vdCByZXR1cm4gYSByZXNwb25zZS5gKTtcclxuICAgIGNvbnN0IHJlc291cmNlUmVzcG9uc2UgPSBIYWxDbGllbnQuY29udmVydFJlc3BvbnNlPFRSZXNvdXJjZSB8IFRFcnJvcj4oZHRvUmVzcG9uc2Uub2sgPyBUUmVzb3VyY2UgOiBURXJyb3IsIGR0b1Jlc3BvbnNlKTtcclxuICAgIHJldHVybiByZXNvdXJjZVJlc3BvbnNlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIHB1dDxUUmVzb3VyY2UgZXh0ZW5kcyBSZXNvdXJjZSwgVEVycm9yIGV4dGVuZHMgUmVzb3VyY2U+KHVyaTogc3RyaW5nLCBib2R5OiB1bmtub3duLCBUUmVzb3VyY2U6IHsgbmV3KCk6IFRSZXNvdXJjZSB9LCBURXJyb3I6IHsgbmV3KCk6IFRFcnJvciB9LCBoZWFkZXJzPzogSHR0cEhlYWRlcnMpOiBQcm9taXNlPEh0dHBSZXNwb25zZTxUUmVzb3VyY2UgfCBURXJyb3I+PiB7XHJcbiAgICBjb25zdCBvcHRpb25zID0gSGFsQ2xpZW50LmNyZWF0ZU9wdGlvbnMoaGVhZGVycyk7XHJcbiAgICBsZXQgZHRvUmVzcG9uc2U6IEh0dHBSZXNwb25zZTxSZXNvdXJjZUR0bz4gfCB1bmRlZmluZWQ7XHJcbiAgICB0cnkge1xyXG4gICAgICBkdG9SZXNwb25zZSA9IGF3YWl0IHRoaXMuX2h0dHBDbGllbnQucHV0PFRSZXNvdXJjZT4odXJpLCBib2R5LCBvcHRpb25zKS50b1Byb21pc2UoKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgSHR0cEVycm9yUmVzcG9uc2UpXHJcbiAgICAgICAgZHRvUmVzcG9uc2UgPSBIYWxDbGllbnQuY29udmVydEVycm9yUmVzcG9uc2UoZSk7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBVVCAke3VyaX0gLSBvcHRpb25zOiAke0pTT04uc3RyaW5naWZ5KG9wdGlvbnMpfSAtIGJvZHk6ICR7Ym9keX0gZmFpbGVkIHdpdGggZXJyb3IgJHtlfWApO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkdG9SZXNwb25zZSlcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBQVVQgJHt1cml9IC0gb3B0aW9uczogJHtKU09OLnN0cmluZ2lmeShvcHRpb25zKX0gLSBib2R5OiAke2JvZHl9IGRpZCBub3QgcmV0dXJuIGEgcmVzcG9uc2UuYCk7XHJcbiAgICBjb25zdCByZXNvdXJjZVJlc3BvbnNlID0gSGFsQ2xpZW50LmNvbnZlcnRSZXNwb25zZTxUUmVzb3VyY2UgfCBURXJyb3I+KGR0b1Jlc3BvbnNlLm9rID8gVFJlc291cmNlIDogVEVycm9yLCBkdG9SZXNwb25zZSk7XHJcbiAgICByZXR1cm4gcmVzb3VyY2VSZXNwb25zZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBkZWxldGU8VEVycm9yIGV4dGVuZHMgUmVzb3VyY2U+KHVyaTogc3RyaW5nLCBURXJyb3I6IHsgbmV3KCk6IFRFcnJvciB9LCBoZWFkZXJzPzogSHR0cEhlYWRlcnMpOiBQcm9taXNlPEh0dHBSZXNwb25zZTx2b2lkIHwgVEVycm9yPj4ge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IEhhbENsaWVudC5jcmVhdGVPcHRpb25zKGhlYWRlcnMpO1xyXG4gICAgbGV0IHJlc3BvbnNlOiBIdHRwUmVzcG9uc2U8UmVzb3VyY2VEdG8gfCB2b2lkPiB8IHVuZGVmaW5lZDtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJlc3BvbnNlID0gYXdhaXQgdGhpcy5faHR0cENsaWVudC5kZWxldGU8dm9pZD4odXJpLCBvcHRpb25zKS50b1Byb21pc2UoKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgSHR0cEVycm9yUmVzcG9uc2UpXHJcbiAgICAgICAgcmVzcG9uc2UgPSBIYWxDbGllbnQuY29udmVydEVycm9yUmVzcG9uc2UoZSk7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERFTEVURSAke3VyaX0gLSBvcHRpb25zOiAke0pTT04uc3RyaW5naWZ5KG9wdGlvbnMpfSBmYWlsZWQgd2l0aCBlcnJvciAke2V9YCk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXJlc3BvbnNlKVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYERFTEVURSAke3VyaX0gLSBvcHRpb25zOiAke0pTT04uc3RyaW5naWZ5KG9wdGlvbnMpfSBkaWQgbm90IHJldHVybiBhIHJlc3BvbnNlLmApO1xyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICBjb25zdCBlcnJvclJlc3BvbnNlID0gSGFsQ2xpZW50LmNvbnZlcnRSZXNwb25zZTxURXJyb3I+KFRFcnJvciwgcmVzcG9uc2UgYXMgSHR0cFJlc3BvbnNlPFJlc291cmNlRHRvPik7XHJcbiAgICAgIHJldHVybiBlcnJvclJlc3BvbnNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXNwb25zZSBhcyBIdHRwUmVzcG9uc2U8dm9pZD47XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBjcmVhdGVPcHRpb25zKGhlYWRlcnM/OiBIdHRwSGVhZGVycyk6IHsgaGVhZGVycz86IEh0dHBIZWFkZXJzOyByZXNwb25zZVR5cGU6ICdqc29uJzsgb2JzZXJ2ZTogJ3Jlc3BvbnNlJyB9IHtcclxuICAgIGhlYWRlcnM/LmFwcGVuZCgnQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2hhbCtqc29uJylcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nLFxyXG4gICAgICBvYnNlcnZlOiAncmVzcG9uc2UnXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRSZXNwb25zZTxUUmVzb3VyY2UgZXh0ZW5kcyBSZXNvdXJjZT4oVFJlc291cmNlOiB7IG5ldyhkdG8/OiBSZXNvdXJjZUR0byB8IG51bGwpOiBUUmVzb3VyY2UgfSwgcmVzcG9uc2U6IEh0dHBSZXNwb25zZTxSZXNvdXJjZUR0bz4pOiBIdHRwUmVzcG9uc2U8VFJlc291cmNlPiB7XHJcbiAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBUUmVzb3VyY2UocmVzcG9uc2UuYm9keSk7XHJcbiAgICBjb25zdCByZXNvdXJjZVJlc3BvbnNlID0gcmVzcG9uc2UuY2xvbmU8VFJlc291cmNlPih7IGJvZHk6IHJlc291cmNlIH0pO1xyXG4gICAgcmV0dXJuIHJlc291cmNlUmVzcG9uc2U7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBjb252ZXJ0RXJyb3JSZXNwb25zZTxUUmVzb3VyY2VEdG8+KGU6IEh0dHBFcnJvclJlc3BvbnNlKTogSHR0cFJlc3BvbnNlPFRSZXNvdXJjZUR0bz4ge1xyXG4gICAgY29uc3QgZHRvUmVzcG9uc2UgPSBuZXcgSHR0cFJlc3BvbnNlKHsgYm9keTogZS5lcnJvciwgaGVhZGVyczogZS5oZWFkZXJzLCBzdGF0dXM6IGUuc3RhdHVzLCBzdGF0dXNUZXh0OiBlLnN0YXR1c1RleHQsIHVybDogZS51cmwgPyBlLnVybCA6IHVuZGVmaW5lZCB9KTtcclxuICAgIHJldHVybiBkdG9SZXNwb25zZTtcclxuICB9XHJcbn1cclxuIl19